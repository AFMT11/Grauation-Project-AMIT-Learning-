
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d69  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fd  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000783  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004aa  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000061f  00000000  00000000  0000295e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002f7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 94 01 	call	0x328	; 0x328 <main>
  78:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <DIO_SetPinDir>:
 */
#include "DIO.h"

void DIO_SetPinDir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
  80:	44 23       	and	r20, r20
  82:	21 f0       	breq	.+8      	; 0x8c <DIO_SetPinDir+0xc>
  84:	4f 3f       	cpi	r20, 0xFF	; 255
  86:	09 f4       	brne	.+2      	; 0x8a <DIO_SetPinDir+0xa>
  88:	4e c0       	rjmp	.+156    	; 0x126 <DIO_SetPinDir+0xa6>
  8a:	08 95       	ret
	{
		case DIO_PIN_IN:
		if (pin >=0 && pin <=7)
  8c:	68 30       	cpi	r22, 0x08	; 8
  8e:	d0 f5       	brcc	.+116    	; 0x104 <DIO_SetPinDir+0x84>
		{
			switch (port)
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	a1 f0       	breq	.+40     	; 0xbc <DIO_SetPinDir+0x3c>
  94:	28 f0       	brcs	.+10     	; 0xa0 <DIO_SetPinDir+0x20>
  96:	82 30       	cpi	r24, 0x02	; 2
  98:	e9 f0       	breq	.+58     	; 0xd4 <DIO_SetPinDir+0x54>
  9a:	83 30       	cpi	r24, 0x03	; 3
  9c:	39 f1       	breq	.+78     	; 0xec <DIO_SetPinDir+0x6c>
  9e:	08 95       	ret
			{
				case DIO_PORTA:
				Clear_Bit(DDRA, pin);
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	20 81       	ld	r18, Z
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_SetPinDir+0x30>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_SetPinDir+0x2c>
  b4:	80 95       	com	r24
  b6:	82 23       	and	r24, r18
  b8:	80 83       	st	Z, r24
				break;
  ba:	08 95       	ret
				case DIO_PORTB:
				Clear_Bit(DDRB, pin);
  bc:	24 b1       	in	r18, 0x04	; 4
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_SetPinDir+0x48>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_SetPinDir+0x44>
  cc:	80 95       	com	r24
  ce:	82 23       	and	r24, r18
  d0:	84 b9       	out	0x04, r24	; 4
				break;
  d2:	08 95       	ret
				case DIO_PORTC:
				Clear_Bit(DDRC, pin);
  d4:	27 b1       	in	r18, 0x07	; 7
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_SetPinDir+0x60>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_SetPinDir+0x5c>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	87 b9       	out	0x07, r24	; 7
				break;
  ea:	08 95       	ret
				case DIO_PORTD:
				Clear_Bit(DDRD, pin);
  ec:	2a b1       	in	r18, 0x0a	; 10
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SetPinDir+0x78>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SetPinDir+0x74>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a b9       	out	0x0a, r24	; 10
				break;												
 102:	08 95       	ret
			}
		}
		else
		{
			switch (port)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	49 f0       	breq	.+18     	; 0x11a <DIO_SetPinDir+0x9a>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_SetPinDir+0x94>
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	41 f0       	breq	.+16     	; 0x11e <DIO_SetPinDir+0x9e>
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	41 f0       	breq	.+16     	; 0x122 <DIO_SetPinDir+0xa2>
 112:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
 114:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
				break;
 118:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
 11a:	14 b8       	out	0x04, r1	; 4
				break;
 11c:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
 11e:	17 b8       	out	0x07, r1	; 7
				break;
 120:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
 122:	1a b8       	out	0x0a, r1	; 10
				break;												
 124:	08 95       	ret
			}
		}
		break;
		case DIO_PIN_OUT:
		if (pin >=0 && pin <=7)
 126:	68 30       	cpi	r22, 0x08	; 8
 128:	b0 f5       	brcc	.+108    	; 0x196 <DIO_SetPinDir+0x116>
		{
			switch (port)
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	99 f0       	breq	.+38     	; 0x154 <DIO_SetPinDir+0xd4>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_SetPinDir+0xba>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_SetPinDir+0xea>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	21 f1       	breq	.+72     	; 0x180 <DIO_SetPinDir+0x100>
 138:	08 95       	ret
			{
				case DIO_PORTA:
				Set_Bit(DDRA, pin);
 13a:	e0 e0       	ldi	r30, 0x00	; 0
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	20 81       	ld	r18, Z
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDir+0xca>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDir+0xc6>
 14e:	82 2b       	or	r24, r18
 150:	80 83       	st	Z, r24
				break;
 152:	08 95       	ret
				case DIO_PORTB:
				Set_Bit(DDRB, pin);
 154:	24 b1       	in	r18, 0x04	; 4
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDir+0xe0>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDir+0xdc>
 164:	82 2b       	or	r24, r18
 166:	84 b9       	out	0x04, r24	; 4
				break;
 168:	08 95       	ret
				case DIO_PORTC:
				Set_Bit(DDRC, pin);
 16a:	27 b1       	in	r18, 0x07	; 7
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SetPinDir+0xf6>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SetPinDir+0xf2>
 17a:	82 2b       	or	r24, r18
 17c:	87 b9       	out	0x07, r24	; 7
				break;
 17e:	08 95       	ret
				case DIO_PORTD:
				Set_Bit(DDRD, pin);
 180:	2a b1       	in	r18, 0x0a	; 10
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinDir+0x10c>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinDir+0x108>
 190:	82 2b       	or	r24, r18
 192:	8a b9       	out	0x0a, r24	; 10
				break;
 194:	08 95       	ret
			}
		}
		else
		{
			switch (port)
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	51 f0       	breq	.+20     	; 0x1ae <DIO_SetPinDir+0x12e>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <DIO_SetPinDir+0x126>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	51 f0       	breq	.+20     	; 0x1b4 <DIO_SetPinDir+0x134>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	59 f0       	breq	.+22     	; 0x1ba <DIO_SetPinDir+0x13a>
 1a4:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
				break;
 1ac:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 b9       	out	0x04, r24	; 4
				break;
 1b2:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	87 b9       	out	0x07, r24	; 7
				break;
 1b8:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	08 95       	ret

000001c0 <DIO_SetPinVal>:
		}
		break;		
	}
}
void DIO_SetPinVal(Uint8 port, Uint8 pin, Uint8 val)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	c8 2f       	mov	r28, r24
 1c6:	d6 2f       	mov	r29, r22
	switch (val)
 1c8:	44 23       	and	r20, r20
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <DIO_SetPinVal+0x14>
 1cc:	4f 3f       	cpi	r20, 0xFF	; 255
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <DIO_SetPinVal+0x12>
 1d0:	55 c0       	rjmp	.+170    	; 0x27c <DIO_SetPinVal+0xbc>
 1d2:	a7 c0       	rjmp	.+334    	; 0x322 <DIO_SetPinVal+0x162>
	{
		case DIO_PIN_OFF:
		if (pin >=0 && pin <=7)
 1d4:	68 30       	cpi	r22, 0x08	; 8
 1d6:	e8 f5       	brcc	.+122    	; 0x252 <DIO_SetPinVal+0x92>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 1d8:	4f ef       	ldi	r20, 0xFF	; 255
 1da:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
			switch (port)
 1de:	c1 30       	cpi	r28, 0x01	; 1
 1e0:	a1 f0       	breq	.+40     	; 0x20a <DIO_SetPinVal+0x4a>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_SetPinVal+0x2e>
 1e4:	c2 30       	cpi	r28, 0x02	; 2
 1e6:	e9 f0       	breq	.+58     	; 0x222 <DIO_SetPinVal+0x62>
 1e8:	c3 30       	cpi	r28, 0x03	; 3
 1ea:	39 f1       	breq	.+78     	; 0x23a <DIO_SetPinVal+0x7a>
 1ec:	9a c0       	rjmp	.+308    	; 0x322 <DIO_SetPinVal+0x162>
			{
				case DIO_PORTA:
				Clear_Bit(PORTA, pin);
 1ee:	e0 e0       	ldi	r30, 0x00	; 0
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	20 81       	ld	r18, Z
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinVal+0x3e>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	da 95       	dec	r29
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinVal+0x3a>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	80 83       	st	Z, r24
				break;
 208:	8c c0       	rjmp	.+280    	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTB:
				Clear_Bit(PORTB, pin);
 20a:	25 b1       	in	r18, 0x05	; 5
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinVal+0x56>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	da 95       	dec	r29
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinVal+0x52>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	85 b9       	out	0x05, r24	; 5
				break;
 220:	80 c0       	rjmp	.+256    	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTC:
				Clear_Bit(PORTC, pin);
 222:	28 b1       	in	r18, 0x08	; 8
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinVal+0x6e>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	da 95       	dec	r29
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinVal+0x6a>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	88 b9       	out	0x08, r24	; 8
				break;
 238:	74 c0       	rjmp	.+232    	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTD:
				Clear_Bit(PORTD, pin);
 23a:	2b b1       	in	r18, 0x0b	; 11
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinVal+0x86>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	da 95       	dec	r29
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinVal+0x82>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	8b b9       	out	0x0b, r24	; 11
				break;
 250:	68 c0       	rjmp	.+208    	; 0x322 <DIO_SetPinVal+0x162>
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 252:	4f ef       	ldi	r20, 0xFF	; 255
 254:	68 e0       	ldi	r22, 0x08	; 8
 256:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
			switch (port)
 25a:	c1 30       	cpi	r28, 0x01	; 1
 25c:	49 f0       	breq	.+18     	; 0x270 <DIO_SetPinVal+0xb0>
 25e:	28 f0       	brcs	.+10     	; 0x26a <DIO_SetPinVal+0xaa>
 260:	c2 30       	cpi	r28, 0x02	; 2
 262:	41 f0       	breq	.+16     	; 0x274 <DIO_SetPinVal+0xb4>
 264:	c3 30       	cpi	r28, 0x03	; 3
 266:	41 f0       	breq	.+16     	; 0x278 <DIO_SetPinVal+0xb8>
 268:	5c c0       	rjmp	.+184    	; 0x322 <DIO_SetPinVal+0x162>
			{
				case DIO_PORTA:
				PORTA = val;
 26a:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
				break;
 26e:	59 c0       	rjmp	.+178    	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTB:
				PORTB = val;
 270:	15 b8       	out	0x05, r1	; 5
				break;
 272:	57 c0       	rjmp	.+174    	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTC:
				PORTC = val;
 274:	18 b8       	out	0x08, r1	; 8
				break;
 276:	55 c0       	rjmp	.+170    	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTD:
				PORTD = val;
 278:	1b b8       	out	0x0b, r1	; 11
				break;
 27a:	53 c0       	rjmp	.+166    	; 0x322 <DIO_SetPinVal+0x162>
			}
		}
		break;
		case DIO_PIN_ON:
		if (pin >=0 && pin <=7)
 27c:	68 30       	cpi	r22, 0x08	; 8
 27e:	c8 f5       	brcc	.+114    	; 0x2f2 <DIO_SetPinVal+0x132>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 280:	4f ef       	ldi	r20, 0xFF	; 255
 282:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
			switch (port)
 286:	c1 30       	cpi	r28, 0x01	; 1
 288:	99 f0       	breq	.+38     	; 0x2b0 <DIO_SetPinVal+0xf0>
 28a:	28 f0       	brcs	.+10     	; 0x296 <DIO_SetPinVal+0xd6>
 28c:	c2 30       	cpi	r28, 0x02	; 2
 28e:	d9 f0       	breq	.+54     	; 0x2c6 <DIO_SetPinVal+0x106>
 290:	c3 30       	cpi	r28, 0x03	; 3
 292:	21 f1       	breq	.+72     	; 0x2dc <DIO_SetPinVal+0x11c>
 294:	46 c0       	rjmp	.+140    	; 0x322 <DIO_SetPinVal+0x162>
			{
				case DIO_PORTA:
				Set_Bit(PORTA, pin);
 296:	e0 e0       	ldi	r30, 0x00	; 0
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	20 81       	ld	r18, Z
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_SetPinVal+0xe6>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	da 95       	dec	r29
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_SetPinVal+0xe2>
 2aa:	82 2b       	or	r24, r18
 2ac:	80 83       	st	Z, r24
				break;
 2ae:	39 c0       	rjmp	.+114    	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTB:
				Set_Bit(PORTB, pin);
 2b0:	25 b1       	in	r18, 0x05	; 5
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinVal+0xfc>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	da 95       	dec	r29
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinVal+0xf8>
 2c0:	82 2b       	or	r24, r18
 2c2:	85 b9       	out	0x05, r24	; 5
				break;
 2c4:	2e c0       	rjmp	.+92     	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTC:
				Set_Bit(PORTC, pin);
 2c6:	28 b1       	in	r18, 0x08	; 8
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_SetPinVal+0x112>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	da 95       	dec	r29
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_SetPinVal+0x10e>
 2d6:	82 2b       	or	r24, r18
 2d8:	88 b9       	out	0x08, r24	; 8
				break;
 2da:	23 c0       	rjmp	.+70     	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTD:
				Set_Bit(PORTD, pin);
 2dc:	2b b1       	in	r18, 0x0b	; 11
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_SetPinVal+0x128>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	da 95       	dec	r29
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_SetPinVal+0x124>
 2ec:	82 2b       	or	r24, r18
 2ee:	8b b9       	out	0x0b, r24	; 11
				break;
 2f0:	18 c0       	rjmp	.+48     	; 0x322 <DIO_SetPinVal+0x162>
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 2f2:	4f ef       	ldi	r20, 0xFF	; 255
 2f4:	68 e0       	ldi	r22, 0x08	; 8
 2f6:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
			switch (port)
 2fa:	c1 30       	cpi	r28, 0x01	; 1
 2fc:	51 f0       	breq	.+20     	; 0x312 <DIO_SetPinVal+0x152>
 2fe:	28 f0       	brcs	.+10     	; 0x30a <DIO_SetPinVal+0x14a>
 300:	c2 30       	cpi	r28, 0x02	; 2
 302:	51 f0       	breq	.+20     	; 0x318 <DIO_SetPinVal+0x158>
 304:	c3 30       	cpi	r28, 0x03	; 3
 306:	59 f0       	breq	.+22     	; 0x31e <DIO_SetPinVal+0x15e>
 308:	0c c0       	rjmp	.+24     	; 0x322 <DIO_SetPinVal+0x162>
			{
				case DIO_PORTA:
				PORTA = val;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
				break;
 310:	08 c0       	rjmp	.+16     	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTB:
				PORTB = val;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	85 b9       	out	0x05, r24	; 5
				break;
 316:	05 c0       	rjmp	.+10     	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTC:
				PORTC = val;
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	88 b9       	out	0x08, r24	; 8
				break;
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_SetPinVal+0x162>
				case DIO_PORTD:
				PORTD = val;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	8b b9       	out	0x0b, r24	; 11
				break;
			}
		}
		break;
	}	
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <main>:
{
	/*variables used to transmit & receive data with SPI*/
	Uint8 receive_data = 0;
	Uint8 uart_receive = 0;
	
	SPI_Master0_INIT(DIO_PORTB, DIO_PIN_2);   //SPI Master initialization
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 b5 01 	call	0x36a	; 0x36a <SPI_Master0_INIT>
	SPI_INIT_Com(DIO_PORTB, DIO_PIN_2);       //SPI initiate the communication
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 cf 01 	call	0x39e	; 0x39e <SPI_INIT_Com>
	UART_INIT();                              //UART initialization
 338:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <UART_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	83 ed       	ldi	r24, 0xD3	; 211
 340:	90 e3       	ldi	r25, 0x30	; 48
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x1a>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x24>
 34c:	00 00       	nop
	_delay_ms(1000);                          //Delay for 1 s wait for other devices to be settled up.

    /* Replace with your application code */
    while (1) 
    {
		uart_receive = UART_Rx();        //receive the data from Blue_tooth module
 34e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <UART_Rx>
		receive_data = SPI_Transceiver(uart_receive);     //Transmit & receive the data from the Slave
 352:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SPI_Transceiver>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	80 e7       	ldi	r24, 0x70	; 112
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x34>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x3e>
 366:	00 00       	nop
 368:	f2 cf       	rjmp	.-28     	; 0x34e <main+0x26>

0000036a <SPI_Master0_INIT>:
{
	DIO_SetPinVal(port, pin, DIO_PIN_OFF);
}
void SPI_END_Com(Uint8 port, Uint8 pin)
{
	DIO_SetPinVal(port, pin, DIO_PIN_ON);
 36a:	4f ef       	ldi	r20, 0xFF	; 255
 36c:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
 370:	4f ef       	ldi	r20, 0xFF	; 255
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	64 e0       	ldi	r22, 0x04	; 4
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
 384:	4f ef       	ldi	r20, 0xFF	; 255
 386:	65 e0       	ldi	r22, 0x05	; 5
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 40 00 	call	0x80	; 0x80 <DIO_SetPinDir>
 38e:	1c bc       	out	0x2c, r1	; 44
 390:	83 e1       	ldi	r24, 0x13	; 19
 392:	8c bd       	out	0x2c, r24	; 44
 394:	1d bc       	out	0x2d, r1	; 45
 396:	8c b5       	in	r24, 0x2c	; 44
 398:	80 64       	ori	r24, 0x40	; 64
 39a:	8c bd       	out	0x2c, r24	; 44
 39c:	08 95       	ret

0000039e <SPI_INIT_Com>:
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
 3a4:	08 95       	ret

000003a6 <SPI_Transceiver>:
}
Uint8 SPI_Transceiver(Uint8 data)
{
	SPDR = data;
 3a6:	8e bd       	out	0x2e, r24	; 46
	while(Get_Bit(SPSR, 7) == 0);
 3a8:	0d b4       	in	r0, 0x2d	; 45
 3aa:	07 fe       	sbrs	r0, 7
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <SPI_Transceiver+0x2>
	return SPDR;
 3ae:	8e b5       	in	r24, 0x2e	; 46
 3b0:	08 95       	ret

000003b2 <UART_INIT>:
void UART_Tx(Uint8 chr)
{
	//Unused Function 
}
void UART_Tx_String(Uint8* str)
{
 3b2:	50 98       	cbi	0x0a, 0	; 10
 3b4:	51 9a       	sbi	0x0a, 1	; 10
 3b6:	88 e1       	ldi	r24, 0x18	; 24
 3b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3bc:	86 e2       	ldi	r24, 0x26	; 38
 3be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3c2:	89 e1       	ldi	r24, 0x19	; 25
 3c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3c8:	08 95       	ret

000003ca <UART_Rx>:
	//Unused Function 
}
Uint8 UART_Rx(void)
{
	Uint8 received_data = 0;
	while(Get_Bit(UCSRnA, 7) == 0);
 3ca:	e0 ec       	ldi	r30, 0xC0	; 192
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	88 23       	and	r24, r24
 3d2:	ec f7       	brge	.-6      	; 0x3ce <UART_Rx+0x4>
	received_data = UDRn;
 3d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return received_data;
 3d8:	08 95       	ret

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
