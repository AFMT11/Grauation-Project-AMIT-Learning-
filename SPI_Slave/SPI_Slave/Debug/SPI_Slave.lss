
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000880  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00000880  000008f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001724  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000938  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6e  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  00003684  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000502  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eb7  00000000  00000000  00003daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3c       	cpi	r26, 0xCE	; 206
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e5 02 	call	0x5ca	; 0x5ca <main>
  7a:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:
 */
#include "DIO.h"

void DIO_SetPinDir(Uint8 port, Uint8 pin, Uint8 dir)
{
	switch (dir)
  82:	44 23       	and	r20, r20
  84:	21 f0       	breq	.+8      	; 0x8e <DIO_SetPinDir+0xc>
  86:	4f 3f       	cpi	r20, 0xFF	; 255
  88:	09 f4       	brne	.+2      	; 0x8c <DIO_SetPinDir+0xa>
  8a:	4b c0       	rjmp	.+150    	; 0x122 <DIO_SetPinDir+0xa0>
  8c:	08 95       	ret
	{
		case DIO_PIN_IN:
		if (pin >=0 && pin <=7)
  8e:	68 30       	cpi	r22, 0x08	; 8
  90:	c0 f5       	brcc	.+112    	; 0x102 <DIO_SetPinDir+0x80>
		{
			switch (port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	91 f0       	breq	.+36     	; 0xba <DIO_SetPinDir+0x38>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_SetPinDir+0x20>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	d9 f0       	breq	.+54     	; 0xd2 <DIO_SetPinDir+0x50>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	29 f1       	breq	.+74     	; 0xea <DIO_SetPinDir+0x68>
  a0:	08 95       	ret
			{
				case DIO_PORTA:
				Clear_Bit(DDRA, pin);
  a2:	2a b3       	in	r18, 0x1a	; 26
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_SetPinDir+0x2c>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_SetPinDir+0x28>
  b2:	80 95       	com	r24
  b4:	82 23       	and	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
				break;
  b8:	08 95       	ret
				case DIO_PORTB:
				Clear_Bit(DDRB, pin);
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_SetPinDir+0x44>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_SetPinDir+0x40>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	87 bb       	out	0x17, r24	; 23
				break;
  d0:	08 95       	ret
				case DIO_PORTC:
				Clear_Bit(DDRC, pin);
  d2:	24 b3       	in	r18, 0x14	; 20
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinDir+0x5c>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinDir+0x58>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	84 bb       	out	0x14, r24	; 20
				break;
  e8:	08 95       	ret
				case DIO_PORTD:
				Clear_Bit(DDRD, pin);
  ea:	21 b3       	in	r18, 0x11	; 17
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_SetPinDir+0x74>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_SetPinDir+0x70>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	81 bb       	out	0x11, r24	; 17
				break;												
 100:	08 95       	ret
			}
		}
		else
		{
			switch (port)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	41 f0       	breq	.+16     	; 0x116 <DIO_SetPinDir+0x94>
 106:	28 f0       	brcs	.+10     	; 0x112 <DIO_SetPinDir+0x90>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	39 f0       	breq	.+14     	; 0x11a <DIO_SetPinDir+0x98>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	39 f0       	breq	.+14     	; 0x11e <DIO_SetPinDir+0x9c>
 110:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
 112:	1a ba       	out	0x1a, r1	; 26
				break;
 114:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
 116:	17 ba       	out	0x17, r1	; 23
				break;
 118:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
 11a:	14 ba       	out	0x14, r1	; 20
				break;
 11c:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
 11e:	11 ba       	out	0x11, r1	; 17
				break;												
 120:	08 95       	ret
			}
		}
		break;
		case DIO_PIN_OUT:
		if (pin >=0 && pin <=7)
 122:	68 30       	cpi	r22, 0x08	; 8
 124:	a0 f5       	brcc	.+104    	; 0x18e <DIO_SetPinDir+0x10c>
		{
			switch (port)
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	89 f0       	breq	.+34     	; 0x14c <DIO_SetPinDir+0xca>
 12a:	28 f0       	brcs	.+10     	; 0x136 <DIO_SetPinDir+0xb4>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	c9 f0       	breq	.+50     	; 0x162 <DIO_SetPinDir+0xe0>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	11 f1       	breq	.+68     	; 0x178 <DIO_SetPinDir+0xf6>
 134:	08 95       	ret
			{
				case DIO_PORTA:
				Set_Bit(DDRA, pin);
 136:	2a b3       	in	r18, 0x1a	; 26
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xc0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xbc>
 146:	82 2b       	or	r24, r18
 148:	8a bb       	out	0x1a, r24	; 26
				break;
 14a:	08 95       	ret
				case DIO_PORTB:
				Set_Bit(DDRB, pin);
 14c:	27 b3       	in	r18, 0x17	; 23
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0xd2>
 15c:	82 2b       	or	r24, r18
 15e:	87 bb       	out	0x17, r24	; 23
				break;
 160:	08 95       	ret
				case DIO_PORTC:
				Set_Bit(DDRC, pin);
 162:	24 b3       	in	r18, 0x14	; 20
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_SetPinDir+0xec>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_SetPinDir+0xe8>
 172:	82 2b       	or	r24, r18
 174:	84 bb       	out	0x14, r24	; 20
				break;
 176:	08 95       	ret
				case DIO_PORTD:
				Set_Bit(DDRD, pin);
 178:	21 b3       	in	r18, 0x11	; 17
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinDir+0x102>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinDir+0xfe>
 188:	82 2b       	or	r24, r18
 18a:	81 bb       	out	0x11, r24	; 17
				break;
 18c:	08 95       	ret
			}
		}
		else
		{
			switch (port)
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	49 f0       	breq	.+18     	; 0x1a4 <DIO_SetPinDir+0x122>
 192:	28 f0       	brcs	.+10     	; 0x19e <DIO_SetPinDir+0x11c>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	49 f0       	breq	.+18     	; 0x1aa <DIO_SetPinDir+0x128>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	51 f0       	breq	.+20     	; 0x1b0 <DIO_SetPinDir+0x12e>
 19c:	08 95       	ret
			{
				case DIO_PORTA:
				DDRA = dir;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	8a bb       	out	0x1a, r24	; 26
				break;
 1a2:	08 95       	ret
				case DIO_PORTB:
				DDRB = dir;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	87 bb       	out	0x17, r24	; 23
				break;
 1a8:	08 95       	ret
				case DIO_PORTC:
				DDRC = dir;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	84 bb       	out	0x14, r24	; 20
				break;
 1ae:	08 95       	ret
				case DIO_PORTD:
				DDRD = dir;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	81 bb       	out	0x11, r24	; 17
 1b4:	08 95       	ret

000001b6 <DIO_SetPinVal>:
		}
		break;		
	}
}
void DIO_SetPinVal(Uint8 port, Uint8 pin, Uint8 val)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	c8 2f       	mov	r28, r24
 1bc:	d6 2f       	mov	r29, r22
	switch (val)
 1be:	44 23       	and	r20, r20
 1c0:	21 f0       	breq	.+8      	; 0x1ca <DIO_SetPinVal+0x14>
 1c2:	4f 3f       	cpi	r20, 0xFF	; 255
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <DIO_SetPinVal+0x12>
 1c6:	52 c0       	rjmp	.+164    	; 0x26c <DIO_SetPinVal+0xb6>
 1c8:	a1 c0       	rjmp	.+322    	; 0x30c <DIO_SetPinVal+0x156>
	{
		case DIO_PIN_OFF:
		if (pin >=0 && pin <=7)
 1ca:	68 30       	cpi	r22, 0x08	; 8
 1cc:	d8 f5       	brcc	.+118    	; 0x244 <DIO_SetPinVal+0x8e>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 1ce:	4f ef       	ldi	r20, 0xFF	; 255
 1d0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
			switch (port)
 1d4:	c1 30       	cpi	r28, 0x01	; 1
 1d6:	91 f0       	breq	.+36     	; 0x1fc <DIO_SetPinVal+0x46>
 1d8:	28 f0       	brcs	.+10     	; 0x1e4 <DIO_SetPinVal+0x2e>
 1da:	c2 30       	cpi	r28, 0x02	; 2
 1dc:	d9 f0       	breq	.+54     	; 0x214 <DIO_SetPinVal+0x5e>
 1de:	c3 30       	cpi	r28, 0x03	; 3
 1e0:	29 f1       	breq	.+74     	; 0x22c <DIO_SetPinVal+0x76>
 1e2:	94 c0       	rjmp	.+296    	; 0x30c <DIO_SetPinVal+0x156>
			{
				case DIO_PORTA:
				Clear_Bit(PORTA, pin);
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPinVal+0x3a>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	da 95       	dec	r29
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPinVal+0x36>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	8b bb       	out	0x1b, r24	; 27
				break;
 1fa:	88 c0       	rjmp	.+272    	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTB:
				Clear_Bit(PORTB, pin);
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinVal+0x52>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	da 95       	dec	r29
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinVal+0x4e>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
				break;
 212:	7c c0       	rjmp	.+248    	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTC:
				Clear_Bit(PORTC, pin);
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPinVal+0x6a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	da 95       	dec	r29
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPinVal+0x66>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
				break;
 22a:	70 c0       	rjmp	.+224    	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTD:
				Clear_Bit(PORTD, pin);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinVal+0x82>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	da 95       	dec	r29
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinVal+0x7e>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
				break;
 242:	64 c0       	rjmp	.+200    	; 0x30c <DIO_SetPinVal+0x156>
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 244:	4f ef       	ldi	r20, 0xFF	; 255
 246:	68 e0       	ldi	r22, 0x08	; 8
 248:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
			switch (port)
 24c:	c1 30       	cpi	r28, 0x01	; 1
 24e:	41 f0       	breq	.+16     	; 0x260 <DIO_SetPinVal+0xaa>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_SetPinVal+0xa6>
 252:	c2 30       	cpi	r28, 0x02	; 2
 254:	39 f0       	breq	.+14     	; 0x264 <DIO_SetPinVal+0xae>
 256:	c3 30       	cpi	r28, 0x03	; 3
 258:	39 f0       	breq	.+14     	; 0x268 <DIO_SetPinVal+0xb2>
 25a:	58 c0       	rjmp	.+176    	; 0x30c <DIO_SetPinVal+0x156>
			{
				case DIO_PORTA:
				PORTA = val;
 25c:	1b ba       	out	0x1b, r1	; 27
				break;
 25e:	56 c0       	rjmp	.+172    	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTB:
				PORTB = val;
 260:	18 ba       	out	0x18, r1	; 24
				break;
 262:	54 c0       	rjmp	.+168    	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTC:
				PORTC = val;
 264:	15 ba       	out	0x15, r1	; 21
				break;
 266:	52 c0       	rjmp	.+164    	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTD:
				PORTD = val;
 268:	12 ba       	out	0x12, r1	; 18
				break;
 26a:	50 c0       	rjmp	.+160    	; 0x30c <DIO_SetPinVal+0x156>
			}
		}
		break;
		case DIO_PIN_ON:
		if (pin >=0 && pin <=7)
 26c:	68 30       	cpi	r22, 0x08	; 8
 26e:	b8 f5       	brcc	.+110    	; 0x2de <DIO_SetPinVal+0x128>
		{
			DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 270:	4f ef       	ldi	r20, 0xFF	; 255
 272:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
			switch (port)
 276:	c1 30       	cpi	r28, 0x01	; 1
 278:	89 f0       	breq	.+34     	; 0x29c <DIO_SetPinVal+0xe6>
 27a:	28 f0       	brcs	.+10     	; 0x286 <DIO_SetPinVal+0xd0>
 27c:	c2 30       	cpi	r28, 0x02	; 2
 27e:	c9 f0       	breq	.+50     	; 0x2b2 <DIO_SetPinVal+0xfc>
 280:	c3 30       	cpi	r28, 0x03	; 3
 282:	11 f1       	breq	.+68     	; 0x2c8 <DIO_SetPinVal+0x112>
 284:	43 c0       	rjmp	.+134    	; 0x30c <DIO_SetPinVal+0x156>
			{
				case DIO_PORTA:
				Set_Bit(PORTA, pin);
 286:	2b b3       	in	r18, 0x1b	; 27
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPinVal+0xdc>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	da 95       	dec	r29
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPinVal+0xd8>
 296:	82 2b       	or	r24, r18
 298:	8b bb       	out	0x1b, r24	; 27
				break;
 29a:	38 c0       	rjmp	.+112    	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTB:
				Set_Bit(PORTB, pin);
 29c:	28 b3       	in	r18, 0x18	; 24
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinVal+0xf2>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	da 95       	dec	r29
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinVal+0xee>
 2ac:	82 2b       	or	r24, r18
 2ae:	88 bb       	out	0x18, r24	; 24
				break;
 2b0:	2d c0       	rjmp	.+90     	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTC:
				Set_Bit(PORTC, pin);
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_SetPinVal+0x108>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	da 95       	dec	r29
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_SetPinVal+0x104>
 2c2:	82 2b       	or	r24, r18
 2c4:	85 bb       	out	0x15, r24	; 21
				break;
 2c6:	22 c0       	rjmp	.+68     	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTD:
				Set_Bit(PORTD, pin);
 2c8:	22 b3       	in	r18, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_SetPinVal+0x11e>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	da 95       	dec	r29
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_SetPinVal+0x11a>
 2d8:	82 2b       	or	r24, r18
 2da:	82 bb       	out	0x12, r24	; 18
				break;
 2dc:	17 c0       	rjmp	.+46     	; 0x30c <DIO_SetPinVal+0x156>
			}
		}
		else
		{
			DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 2de:	4f ef       	ldi	r20, 0xFF	; 255
 2e0:	68 e0       	ldi	r22, 0x08	; 8
 2e2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
			switch (port)
 2e6:	c1 30       	cpi	r28, 0x01	; 1
 2e8:	49 f0       	breq	.+18     	; 0x2fc <DIO_SetPinVal+0x146>
 2ea:	28 f0       	brcs	.+10     	; 0x2f6 <DIO_SetPinVal+0x140>
 2ec:	c2 30       	cpi	r28, 0x02	; 2
 2ee:	49 f0       	breq	.+18     	; 0x302 <DIO_SetPinVal+0x14c>
 2f0:	c3 30       	cpi	r28, 0x03	; 3
 2f2:	51 f0       	breq	.+20     	; 0x308 <DIO_SetPinVal+0x152>
 2f4:	0b c0       	rjmp	.+22     	; 0x30c <DIO_SetPinVal+0x156>
			{
				case DIO_PORTA:
				PORTA = val;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	8b bb       	out	0x1b, r24	; 27
				break;
 2fa:	08 c0       	rjmp	.+16     	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTB:
				PORTB = val;
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	88 bb       	out	0x18, r24	; 24
				break;
 300:	05 c0       	rjmp	.+10     	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTC:
				PORTC = val;
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	85 bb       	out	0x15, r24	; 21
				break;
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_SetPinVal+0x156>
				case DIO_PORTD:
				PORTD = val;
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	82 bb       	out	0x12, r24	; 18
				break;
			}
		}
		break;
	}	
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <DIO_TogglePin>:
void DIO_TogglePin(Uint8 port, Uint8 pin)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	c8 2f       	mov	r28, r24
 318:	d6 2f       	mov	r29, r22
	if (pin >=0 && pin <=7)
 31a:	68 30       	cpi	r22, 0x08	; 8
 31c:	b8 f5       	brcc	.+110    	; 0x38c <DIO_TogglePin+0x7a>
	{
		DIO_SetPinDir(port, pin, DIO_PIN_OUT);
 31e:	4f ef       	ldi	r20, 0xFF	; 255
 320:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		switch (port)
 324:	c1 30       	cpi	r28, 0x01	; 1
 326:	89 f0       	breq	.+34     	; 0x34a <DIO_TogglePin+0x38>
 328:	28 f0       	brcs	.+10     	; 0x334 <DIO_TogglePin+0x22>
 32a:	c2 30       	cpi	r28, 0x02	; 2
 32c:	c9 f0       	breq	.+50     	; 0x360 <DIO_TogglePin+0x4e>
 32e:	c3 30       	cpi	r28, 0x03	; 3
 330:	11 f1       	breq	.+68     	; 0x376 <DIO_TogglePin+0x64>
 332:	47 c0       	rjmp	.+142    	; 0x3c2 <DIO_TogglePin+0xb0>
		{
			case DIO_PORTA:
			Toggle_Bit(PORTA, pin);
 334:	2b b3       	in	r18, 0x1b	; 27
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_TogglePin+0x2e>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	da 95       	dec	r29
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_TogglePin+0x2a>
 344:	82 27       	eor	r24, r18
 346:	8b bb       	out	0x1b, r24	; 27
			break;
 348:	3c c0       	rjmp	.+120    	; 0x3c2 <DIO_TogglePin+0xb0>
			case DIO_PORTB:
			Toggle_Bit(PORTB, pin);
 34a:	28 b3       	in	r18, 0x18	; 24
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_TogglePin+0x44>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	da 95       	dec	r29
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_TogglePin+0x40>
 35a:	82 27       	eor	r24, r18
 35c:	88 bb       	out	0x18, r24	; 24
			break;
 35e:	31 c0       	rjmp	.+98     	; 0x3c2 <DIO_TogglePin+0xb0>
			case DIO_PORTC:
			Toggle_Bit(PORTC, pin);
 360:	25 b3       	in	r18, 0x15	; 21
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_TogglePin+0x5a>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	da 95       	dec	r29
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_TogglePin+0x56>
 370:	82 27       	eor	r24, r18
 372:	85 bb       	out	0x15, r24	; 21
			break;
 374:	26 c0       	rjmp	.+76     	; 0x3c2 <DIO_TogglePin+0xb0>
			case DIO_PORTD:
			Toggle_Bit(PORTD, pin);
 376:	22 b3       	in	r18, 0x12	; 18
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_TogglePin+0x70>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	da 95       	dec	r29
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_TogglePin+0x6c>
 386:	82 27       	eor	r24, r18
 388:	82 bb       	out	0x12, r24	; 18
			break;									
 38a:	1b c0       	rjmp	.+54     	; 0x3c2 <DIO_TogglePin+0xb0>
		}
	}
	else
	{
		DIO_SetPinDir(port, DIO_ALL_PINs, DIO_PIN_OUT);
 38c:	4f ef       	ldi	r20, 0xFF	; 255
 38e:	68 e0       	ldi	r22, 0x08	; 8
 390:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
		switch (port)
 394:	c1 30       	cpi	r28, 0x01	; 1
 396:	51 f0       	breq	.+20     	; 0x3ac <DIO_TogglePin+0x9a>
 398:	28 f0       	brcs	.+10     	; 0x3a4 <DIO_TogglePin+0x92>
 39a:	c2 30       	cpi	r28, 0x02	; 2
 39c:	59 f0       	breq	.+22     	; 0x3b4 <DIO_TogglePin+0xa2>
 39e:	c3 30       	cpi	r28, 0x03	; 3
 3a0:	69 f0       	breq	.+26     	; 0x3bc <DIO_TogglePin+0xaa>
 3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <DIO_TogglePin+0xb0>
		{
			case DIO_PORTA:
			PORTA ^= 0xff;
 3a4:	8b b3       	in	r24, 0x1b	; 27
 3a6:	80 95       	com	r24
 3a8:	8b bb       	out	0x1b, r24	; 27
			break;
 3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <DIO_TogglePin+0xb0>
			case DIO_PORTB:
			PORTB ^= 0xff;
 3ac:	88 b3       	in	r24, 0x18	; 24
 3ae:	80 95       	com	r24
 3b0:	88 bb       	out	0x18, r24	; 24
			break;
 3b2:	07 c0       	rjmp	.+14     	; 0x3c2 <DIO_TogglePin+0xb0>
			case DIO_PORTC:
			PORTC ^= 0xff;
 3b4:	85 b3       	in	r24, 0x15	; 21
 3b6:	80 95       	com	r24
 3b8:	85 bb       	out	0x15, r24	; 21
			break;
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <DIO_TogglePin+0xb0>
			case DIO_PORTD:
			PORTD ^= 0xff;
 3bc:	82 b3       	in	r24, 0x12	; 18
 3be:	80 95       	com	r24
 3c0:	82 bb       	out	0x12, r24	; 18
			break;									
		}	
	}
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <LCD_WriteCMD>:
		{
			i = 1;
			Revers_num = multiplier;
		}	
	}
}
 3c8:	cf 93       	push	r28
 3ca:	c8 2f       	mov	r28, r24
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	63 e0       	ldi	r22, 0x03	; 3
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 3ea:	8b b3       	in	r24, 0x1b	; 27
 3ec:	9c 2f       	mov	r25, r28
 3ee:	90 7f       	andi	r25, 0xF0	; 240
 3f0:	8f 70       	andi	r24, 0x0F	; 15
 3f2:	89 2b       	or	r24, r25
 3f4:	8b bb       	out	0x1b, r24	; 27
 3f6:	4f ef       	ldi	r20, 0xFF	; 255
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 400:	8f e9       	ldi	r24, 0x9F	; 159
 402:	9f e0       	ldi	r25, 0x0F	; 15
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 416:	2b b3       	in	r18, 0x1b	; 27
 418:	30 e1       	ldi	r19, 0x10	; 16
 41a:	c3 9f       	mul	r28, r19
 41c:	c0 01       	movw	r24, r0
 41e:	11 24       	eor	r1, r1
 420:	92 2f       	mov	r25, r18
 422:	9f 70       	andi	r25, 0x0F	; 15
 424:	89 2b       	or	r24, r25
 426:	8b bb       	out	0x1b, r24	; 27
 428:	4f ef       	ldi	r20, 0xFF	; 255
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 432:	8f e9       	ldi	r24, 0x9F	; 159
 434:	9f e0       	ldi	r25, 0x0F	; 15
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	63 e0       	ldi	r22, 0x03	; 3
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	9e e4       	ldi	r25, 0x4E	; 78
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <LCD_INT>:
 458:	4f ef       	ldi	r20, 0xFF	; 255
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 462:	4f ef       	ldi	r20, 0xFF	; 255
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 46c:	4f ef       	ldi	r20, 0xFF	; 255
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 476:	4f ef       	ldi	r20, 0xFF	; 255
 478:	64 e0       	ldi	r22, 0x04	; 4
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 480:	4f ef       	ldi	r20, 0xFF	; 255
 482:	65 e0       	ldi	r22, 0x05	; 5
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 48a:	4f ef       	ldi	r20, 0xFF	; 255
 48c:	66 e0       	ldi	r22, 0x06	; 6
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 494:	4f ef       	ldi	r20, 0xFF	; 255
 496:	67 e0       	ldi	r22, 0x07	; 7
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	81 ee       	ldi	r24, 0xE1	; 225
 4a2:	94 e0       	ldi	r25, 0x04	; 4
 4a4:	21 50       	subi	r18, 0x01	; 1
 4a6:	80 40       	sbci	r24, 0x00	; 0
 4a8:	90 40       	sbci	r25, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <LCD_INT+0x4c>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_INT+0x56>
 4ae:	00 00       	nop
 4b0:	83 e3       	ldi	r24, 0x33	; 51
 4b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 4b6:	82 e3       	ldi	r24, 0x32	; 50
 4b8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 4bc:	88 e2       	ldi	r24, 0x28	; 40
 4be:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 4da:	08 95       	ret

000004dc <LCD_WriteCHAR>:
 4dc:	cf 93       	push	r28
 4de:	c8 2f       	mov	r28, r24
 4e0:	4f ef       	ldi	r20, 0xFF	; 255
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 4fe:	8b b3       	in	r24, 0x1b	; 27
 500:	9c 2f       	mov	r25, r28
 502:	90 7f       	andi	r25, 0xF0	; 240
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	89 2b       	or	r24, r25
 508:	8b bb       	out	0x1b, r24	; 27
 50a:	4f ef       	ldi	r20, 0xFF	; 255
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 514:	8f e9       	ldi	r24, 0x9F	; 159
 516:	9f e0       	ldi	r25, 0x0F	; 15
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_WriteCHAR+0x3c>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_WriteCHAR+0x42>
 51e:	00 00       	nop
 520:	40 e0       	ldi	r20, 0x00	; 0
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 52a:	2b b3       	in	r18, 0x1b	; 27
 52c:	30 e1       	ldi	r19, 0x10	; 16
 52e:	c3 9f       	mul	r28, r19
 530:	c0 01       	movw	r24, r0
 532:	11 24       	eor	r1, r1
 534:	92 2f       	mov	r25, r18
 536:	9f 70       	andi	r25, 0x0F	; 15
 538:	89 2b       	or	r24, r25
 53a:	8b bb       	out	0x1b, r24	; 27
 53c:	4f ef       	ldi	r20, 0xFF	; 255
 53e:	63 e0       	ldi	r22, 0x03	; 3
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 546:	8f e9       	ldi	r24, 0x9F	; 159
 548:	9f e0       	ldi	r25, 0x0F	; 15
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <LCD_WriteCHAR+0x6e>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <LCD_WriteCHAR+0x74>
 550:	00 00       	nop
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	63 e0       	ldi	r22, 0x03	; 3
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
 55c:	8f e1       	ldi	r24, 0x1F	; 31
 55e:	9e e4       	ldi	r25, 0x4E	; 78
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <LCD_WriteCHAR+0x84>
 564:	00 c0       	rjmp	.+0      	; 0x566 <LCD_WriteCHAR+0x8a>
 566:	00 00       	nop
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <LCD_WriteSTRING>:
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	fc 01       	movw	r30, r24
 574:	80 81       	ld	r24, Z
 576:	88 23       	and	r24, r24
 578:	59 f0       	breq	.+22     	; 0x590 <LCD_WriteSTRING+0x24>
 57a:	8f 01       	movw	r16, r30
 57c:	c0 e0       	ldi	r28, 0x00	; 0
 57e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_WriteCHAR>
 582:	cf 5f       	subi	r28, 0xFF	; 255
 584:	f8 01       	movw	r30, r16
 586:	ec 0f       	add	r30, r28
 588:	f1 1d       	adc	r31, r1
 58a:	80 81       	ld	r24, Z
 58c:	81 11       	cpse	r24, r1
 58e:	f7 cf       	rjmp	.-18     	; 0x57e <LCD_WriteSTRING+0x12>
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <LCD_GoTo>:
void LCD_GoTo(Uint8 row, Uint8 col)
{
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	00 d0       	rcall	.+0      	; 0x59e <LCD_GoTo+0x6>
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
	Uint8 arr[2] = {Cursor_Begin_1st_Line, Cursor_Begin_2st_Line};
 5a2:	90 e8       	ldi	r25, 0x80	; 128
 5a4:	99 83       	std	Y+1, r25	; 0x01
 5a6:	90 ec       	ldi	r25, 0xC0	; 192
 5a8:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCMD(arr[row] + col);
 5aa:	fe 01       	movw	r30, r28
 5ac:	e8 0f       	add	r30, r24
 5ae:	f1 1d       	adc	r31, r1
 5b0:	81 81       	ldd	r24, Z+1	; 0x01
 5b2:	86 0f       	add	r24, r22
 5b4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
}
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_WriteCMD(Clear_Display_Screen);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 5c8:	08 95       	ret

000005ca <main>:
#include "LCD.h"
#define F_CPU 16000000
#include <util/delay.h>

int main(void)
{
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	cd 56       	subi	r28, 0x6D	; 109
 5d4:	d1 09       	sbc	r29, r1
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
	Uint8 i, j, k, h; //variables used in loops
	
	Uint8 error_check = 1; //variable to check if the password written is incorrect
	
	/*Strings to be displayed at the run time*/
	Uint8 password[] = "ahmed_atef";  //password of the system
 5e0:	8b e0       	ldi	r24, 0x0B	; 11
 5e2:	e0 e6       	ldi	r30, 0x60	; 96
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	de 01       	movw	r26, r28
 5e8:	11 96       	adiw	r26, 0x01	; 1
 5ea:	01 90       	ld	r0, Z+
 5ec:	0d 92       	st	X+, r0
 5ee:	8a 95       	dec	r24
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x20>
	Uint8 password_message[] = "Enter Your Pass";  
 5f2:	80 e1       	ldi	r24, 0x10	; 16
 5f4:	eb e6       	ldi	r30, 0x6B	; 107
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	de 01       	movw	r26, r28
 5fa:	1c 96       	adiw	r26, 0x0c	; 12
 5fc:	01 90       	ld	r0, Z+
 5fe:	0d 92       	st	X+, r0
 600:	8a 95       	dec	r24
 602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x32>
	Uint8 wrong_password[] = "Wrong Password";
 604:	8f e0       	ldi	r24, 0x0F	; 15
 606:	eb e7       	ldi	r30, 0x7B	; 123
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	de 01       	movw	r26, r28
 60c:	5c 96       	adiw	r26, 0x1c	; 28
 60e:	01 90       	ld	r0, Z+
 610:	0d 92       	st	X+, r0
 612:	8a 95       	dec	r24
 614:	e1 f7       	brne	.-8      	; 0x60e <main+0x44>
	Uint8 welocme_message0[] = "Welcome Home";
 616:	8d e0       	ldi	r24, 0x0D	; 13
 618:	ea e8       	ldi	r30, 0x8A	; 138
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	de 01       	movw	r26, r28
 61e:	9b 96       	adiw	r26, 0x2b	; 43
 620:	01 90       	ld	r0, Z+
 622:	0d 92       	st	X+, r0
 624:	8a 95       	dec	r24
 626:	e1 f7       	brne	.-8      	; 0x620 <main+0x56>
	Uint8 welocme_message1[] = "Mr. Ahmed";
 628:	8a e0       	ldi	r24, 0x0A	; 10
 62a:	e7 e9       	ldi	r30, 0x97	; 151
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	de 01       	movw	r26, r28
 630:	d8 96       	adiw	r26, 0x38	; 56
 632:	01 90       	ld	r0, Z+
 634:	0d 92       	st	X+, r0
 636:	8a 95       	dec	r24
 638:	e1 f7       	brne	.-8      	; 0x632 <main+0x68>
	Uint8 error_message[] = "No such a LED or Actuator";
 63a:	8a e1       	ldi	r24, 0x1A	; 26
 63c:	e1 ea       	ldi	r30, 0xA1	; 161
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	de 01       	movw	r26, r28
 642:	ae 5b       	subi	r26, 0xBE	; 190
 644:	bf 4f       	sbci	r27, 0xFF	; 255
 646:	01 90       	ld	r0, Z+
 648:	0d 92       	st	X+, r0
 64a:	8a 95       	dec	r24
 64c:	e1 f7       	brne	.-8      	; 0x646 <main+0x7c>
	Uint8 led0[] = "LED 0";
 64e:	86 e0       	ldi	r24, 0x06	; 6
 650:	eb eb       	ldi	r30, 0xBB	; 187
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	de 01       	movw	r26, r28
 656:	a4 5a       	subi	r26, 0xA4	; 164
 658:	bf 4f       	sbci	r27, 0xFF	; 255
 65a:	01 90       	ld	r0, Z+
 65c:	0d 92       	st	X+, r0
 65e:	8a 95       	dec	r24
 660:	e1 f7       	brne	.-8      	; 0x65a <main+0x90>
	Uint8 led1[] = "LED 1";
 662:	86 e0       	ldi	r24, 0x06	; 6
 664:	e1 ec       	ldi	r30, 0xC1	; 193
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	de 01       	movw	r26, r28
 66a:	ae 59       	subi	r26, 0x9E	; 158
 66c:	bf 4f       	sbci	r27, 0xFF	; 255
 66e:	01 90       	ld	r0, Z+
 670:	0d 92       	st	X+, r0
 672:	8a 95       	dec	r24
 674:	e1 f7       	brne	.-8      	; 0x66e <main+0xa4>
	Uint8 led2[] = "LED 2";
 676:	86 e0       	ldi	r24, 0x06	; 6
 678:	e7 ec       	ldi	r30, 0xC7	; 199
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	de 01       	movw	r26, r28
 67e:	a8 59       	subi	r26, 0x98	; 152
 680:	bf 4f       	sbci	r27, 0xFF	; 255
 682:	01 90       	ld	r0, Z+
 684:	0d 92       	st	X+, r0
 686:	8a 95       	dec	r24
 688:	e1 f7       	brne	.-8      	; 0x682 <main+0xb8>
	
	DIO_SetPinVal(DIO_PORTA, DIO_PIN_3, DIO_PIN_OFF); //turning off the buzzer
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	63 e0       	ldi	r22, 0x03	; 3
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_SetPinVal>
	
	SPI_Slave_INIT();  //SPI slave initialization
 694:	0e 94 21 04 	call	0x842	; 0x842 <SPI_Slave_INIT>
	LCD_INT();         //LCD initialization
 698:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_INT>
 69c:	6e 01       	movw	r12, r28
 69e:	2b e0       	ldi	r18, 0x0B	; 11
 6a0:	c2 0e       	add	r12, r18
 6a2:	d1 1c       	adc	r13, r1
    {
		/*the first stage of the code: checking of the password*/
		while (error_check > 0)     //if the variable error_check has a value more than 0,
		{                           //then continue in the loop until the entered password is correct                         
			error_check = 0;
			LCD_Clear();
 6a4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_Clear>
			LCD_WriteSTRING(password_message);
 6a8:	ce 01       	movw	r24, r28
 6aa:	0c 96       	adiw	r24, 0x0c	; 12
 6ac:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
			LCD_WriteCMD(Cursor_Begin_2st_Line); //Begin the cursor at the second line
 6b0:	80 ec       	ldi	r24, 0xC0	; 192
 6b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
 6b6:	ce 01       	movw	r24, r28
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	7c 01       	movw	r14, r24
    while (1) 
    {
		/*the first stage of the code: checking of the password*/
		while (error_check > 0)     //if the variable error_check has a value more than 0,
		{                           //then continue in the loop until the entered password is correct                         
			error_check = 0;
 6bc:	10 e0       	ldi	r17, 0x00	; 0
			LCD_WriteSTRING(password_message);
			LCD_WriteCMD(Cursor_Begin_2st_Line); //Begin the cursor at the second line
			
			for (i = 0; i < 10; i++)             //stage of taking the code
			{
				receive_data = SPI_Transceiver(trans_data); //receive the data from the Master
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 39 04 	call	0x872	; 0x872 <SPI_Transceiver>
 6c4:	08 2f       	mov	r16, r24
				LCD_WriteCHAR('*');
 6c6:	8a e2       	ldi	r24, 0x2A	; 42
 6c8:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_WriteCHAR>
				for (j = 0; j < 2; j++)          //beep for every character you enter
				{
					DIO_TogglePin(DIO_PORTA, DIO_PIN_3);
 6cc:	63 e0       	ldi	r22, 0x03	; 3
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	0e 94 89 01 	call	0x312	; 0x312 <DIO_TogglePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	e0 e7       	ldi	r30, 0x70	; 112
 6d8:	f2 e0       	ldi	r31, 0x02	; 2
 6da:	91 50       	subi	r25, 0x01	; 1
 6dc:	e0 40       	sbci	r30, 0x00	; 0
 6de:	f0 40       	sbci	r31, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x110>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x11a>
 6e4:	00 00       	nop
 6e6:	63 e0       	ldi	r22, 0x03	; 3
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	0e 94 89 01 	call	0x312	; 0x312 <DIO_TogglePin>
 6ee:	2f ef       	ldi	r18, 0xFF	; 255
 6f0:	80 e7       	ldi	r24, 0x70	; 112
 6f2:	92 e0       	ldi	r25, 0x02	; 2
 6f4:	21 50       	subi	r18, 0x01	; 1
 6f6:	80 40       	sbci	r24, 0x00	; 0
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	e1 f7       	brne	.-8      	; 0x6f4 <main+0x12a>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <main+0x134>
 6fe:	00 00       	nop
					_delay_ms(50);
				}				
				if (receive_data != password[i]) //if there one or more than one character are wrong increase the variable error_check by 1
 700:	f7 01       	movw	r30, r14
 702:	81 91       	ld	r24, Z+
 704:	7f 01       	movw	r14, r30
 706:	08 13       	cpse	r16, r24
				{
					error_check++;
 708:	1f 5f       	subi	r17, 0xFF	; 255
			error_check = 0;
			LCD_Clear();
			LCD_WriteSTRING(password_message);
			LCD_WriteCMD(Cursor_Begin_2st_Line); //Begin the cursor at the second line
			
			for (i = 0; i < 10; i++)             //stage of taking the code
 70a:	ec 14       	cp	r14, r12
 70c:	fd 04       	cpc	r15, r13
 70e:	b9 f6       	brne	.-82     	; 0x6be <main+0xf4>
				{
					error_check++;
				}
			}
			
			if (error_check)  //if the password entered is wrong      
 710:	11 23       	and	r17, r17
 712:	09 f4       	brne	.+2      	; 0x716 <main+0x14c>
 714:	87 c0       	rjmp	.+270    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			{
				LCD_Clear();
 716:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_Clear>
				LCD_WriteSTRING(password_message);
 71a:	ce 01       	movw	r24, r28
 71c:	0c 96       	adiw	r24, 0x0c	; 12
 71e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
				LCD_GoTo(1,0);
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_GoTo>
				LCD_WriteSTRING(wrong_password);
 72a:	ce 01       	movw	r24, r28
 72c:	4c 96       	adiw	r24, 0x1c	; 28
 72e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
 732:	16 e0       	ldi	r17, 0x06	; 6
				for (k = 0; k < 6; k++)    //three beeps indicates the entered password is wrong
				{
					DIO_TogglePin(DIO_PORTA, DIO_PIN_3);
 734:	63 e0       	ldi	r22, 0x03	; 3
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	0e 94 89 01 	call	0x312	; 0x312 <DIO_TogglePin>
 73c:	ff ef       	ldi	r31, 0xFF	; 255
 73e:	21 ee       	ldi	r18, 0xE1	; 225
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	f1 50       	subi	r31, 0x01	; 1
 744:	20 40       	sbci	r18, 0x00	; 0
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	e1 f7       	brne	.-8      	; 0x742 <main+0x178>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <main+0x182>
 74c:	00 00       	nop
 74e:	11 50       	subi	r17, 0x01	; 1
			{
				LCD_Clear();
				LCD_WriteSTRING(password_message);
				LCD_GoTo(1,0);
				LCD_WriteSTRING(wrong_password);
				for (k = 0; k < 6; k++)    //three beeps indicates the entered password is wrong
 750:	89 f7       	brne	.-30     	; 0x734 <main+0x16a>
 752:	9f ef       	ldi	r25, 0xFF	; 255
 754:	e3 ed       	ldi	r30, 0xD3	; 211
 756:	f0 e3       	ldi	r31, 0x30	; 48
 758:	91 50       	subi	r25, 0x01	; 1
 75a:	e0 40       	sbci	r30, 0x00	; 0
 75c:	f0 40       	sbci	r31, 0x00	; 0
 75e:	e1 f7       	brne	.-8      	; 0x758 <main+0x18e>
 760:	00 c0       	rjmp	.+0      	; 0x762 <main+0x198>
 762:	00 00       	nop
 764:	9f cf       	rjmp	.-194    	; 0x6a4 <main+0xda>
		LCD_GoTo(1,0);
		LCD_WriteSTRING(welocme_message1);
		
		while(1)       //checking for the entered character to do some response
		{
			receive_data = SPI_Transceiver(trans_data); //receive the data from the Master
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	0e 94 39 04 	call	0x872	; 0x872 <SPI_Transceiver>
 76c:	08 2f       	mov	r16, r24
			
			LCD_Clear();
 76e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_Clear>
			LCD_WriteCHAR(receive_data);      //Display the entered character on the screen
 772:	80 2f       	mov	r24, r16
 774:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_WriteCHAR>
			
			if (receive_data == 'a')          //if the entered character is 'a' toggle LED 0,
 778:	01 36       	cpi	r16, 0x61	; 97
 77a:	69 f4       	brne	.+26     	; 0x796 <main+0x1cc>
			{                                 //and display the number of the LED on LCD
				DIO_TogglePin(DIO_PORTC, DIO_PIN_2);
 77c:	62 e0       	ldi	r22, 0x02	; 2
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	0e 94 89 01 	call	0x312	; 0x312 <DIO_TogglePin>
				LCD_WriteCMD(Cursor_Begin_2st_Line);
 784:	80 ec       	ldi	r24, 0xC0	; 192
 786:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
				LCD_WriteSTRING(led0);				
 78a:	ce 01       	movw	r24, r28
 78c:	84 5a       	subi	r24, 0xA4	; 164
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
 794:	e8 cf       	rjmp	.-48     	; 0x766 <main+0x19c>
			}
			else if (receive_data == 'b')     //if the entered character is 'b' toggle LED 1,
 796:	02 36       	cpi	r16, 0x62	; 98
 798:	69 f4       	brne	.+26     	; 0x7b4 <main+0x1ea>
			{                                 //and display the number of the LED on LCD
				DIO_TogglePin(DIO_PORTC, DIO_PIN_7);
 79a:	67 e0       	ldi	r22, 0x07	; 7
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	0e 94 89 01 	call	0x312	; 0x312 <DIO_TogglePin>
				LCD_WriteCMD(Cursor_Begin_2st_Line);
 7a2:	80 ec       	ldi	r24, 0xC0	; 192
 7a4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
				LCD_WriteSTRING(led1);				
 7a8:	ce 01       	movw	r24, r28
 7aa:	8e 59       	subi	r24, 0x9E	; 158
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
 7b2:	d9 cf       	rjmp	.-78     	; 0x766 <main+0x19c>
			}
			else if (receive_data == 'c')     //if the entered character is 'c' toggle LED 2,
 7b4:	03 36       	cpi	r16, 0x63	; 99
 7b6:	69 f4       	brne	.+26     	; 0x7d2 <main+0x208>
			{                                 //and display the number of the LED on LCD
				DIO_TogglePin(DIO_PORTD, DIO_PIN_3);
 7b8:	63 e0       	ldi	r22, 0x03	; 3
 7ba:	83 e0       	ldi	r24, 0x03	; 3
 7bc:	0e 94 89 01 	call	0x312	; 0x312 <DIO_TogglePin>
				LCD_WriteCMD(Cursor_Begin_2st_Line);
 7c0:	80 ec       	ldi	r24, 0xC0	; 192
 7c2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
				LCD_WriteSTRING(led2);				
 7c6:	ce 01       	movw	r24, r28
 7c8:	88 59       	subi	r24, 0x98	; 152
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
 7d0:	ca cf       	rjmp	.-108    	; 0x766 <main+0x19c>
			}
			else                              //if the entered character is not one the previous characters
			{
				LCD_WriteCMD(Cursor_Begin_2st_Line);
 7d2:	80 ec       	ldi	r24, 0xC0	; 192
 7d4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
				LCD_WriteSTRING(error_message);      //display the error message
 7d8:	ce 01       	movw	r24, r28
 7da:	8e 5b       	subi	r24, 0xBE	; 190
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
 7e2:	2f ef       	ldi	r18, 0xFF	; 255
 7e4:	83 ed       	ldi	r24, 0xD3	; 211
 7e6:	90 e3       	ldi	r25, 0x30	; 48
 7e8:	21 50       	subi	r18, 0x01	; 1
 7ea:	80 40       	sbci	r24, 0x00	; 0
 7ec:	90 40       	sbci	r25, 0x00	; 0
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <main+0x21e>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <main+0x228>
 7f2:	00 00       	nop
				_delay_ms(1000);
				
				for (h = 0; h < 9; h++)              //shift the display left to show the entire message
 7f4:	10 e0       	ldi	r17, 0x00	; 0
				{
					LCD_WriteCMD(Shift_Entire_Display_Left);
 7f6:	88 e1       	ldi	r24, 0x18	; 24
 7f8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_WriteCMD>
					LCD_GoTo(0,h+1);
 7fc:	1f 5f       	subi	r17, 0xFF	; 255
 7fe:	61 2f       	mov	r22, r17
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_GoTo>
					LCD_WriteCHAR(receive_data);
 806:	80 2f       	mov	r24, r16
 808:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_WriteCHAR>
 80c:	ef ef       	ldi	r30, 0xFF	; 255
 80e:	f5 ea       	ldi	r31, 0xA5	; 165
 810:	2e e0       	ldi	r18, 0x0E	; 14
 812:	e1 50       	subi	r30, 0x01	; 1
 814:	f0 40       	sbci	r31, 0x00	; 0
 816:	20 40       	sbci	r18, 0x00	; 0
 818:	e1 f7       	brne	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81c:	00 00       	nop
			{
				LCD_WriteCMD(Cursor_Begin_2st_Line);
				LCD_WriteSTRING(error_message);      //display the error message
				_delay_ms(1000);
				
				for (h = 0; h < 9; h++)              //shift the display left to show the entire message
 81e:	19 30       	cpi	r17, 0x09	; 9
 820:	51 f7       	brne	.-44     	; 0x7f6 <main+0x22c>
 822:	a1 cf       	rjmp	.-190    	; 0x766 <main+0x19c>
				}
				_delay_ms(1000);
			}		
		}
		
		LCD_Clear();           //after entering the password right finally, show up the welcome message
 824:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_Clear>
		LCD_WriteSTRING(welocme_message0);
 828:	ce 01       	movw	r24, r28
 82a:	8b 96       	adiw	r24, 0x2b	; 43
 82c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
		LCD_GoTo(1,0);
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_GoTo>
		LCD_WriteSTRING(welocme_message1);
 838:	ce 01       	movw	r24, r28
 83a:	c8 96       	adiw	r24, 0x38	; 56
 83c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_WriteSTRING>
 840:	92 cf       	rjmp	.-220    	; 0x766 <main+0x19c>

00000842 <SPI_Slave_INIT>:
{
	DIO_SetPinVal(port, pin, DIO_PIN_OFF);
}
void SPI_END_Com(Uint8 port, Uint8 pin)
{
	DIO_SetPinVal(port, pin, DIO_PIN_ON);
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	64 e0       	ldi	r22, 0x04	; 4
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	65 e0       	ldi	r22, 0x05	; 5
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 856:	4f ef       	ldi	r20, 0xFF	; 255
 858:	66 e0       	ldi	r22, 0x06	; 6
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	67 e0       	ldi	r22, 0x07	; 7
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 86a:	1d b8       	out	0x0d, r1	; 13
 86c:	1d b8       	out	0x0d, r1	; 13
 86e:	6e 9a       	sbi	0x0d, 6	; 13
 870:	08 95       	ret

00000872 <SPI_Transceiver>:
}
Uint8 SPI_Transceiver(Uint8 data)
{
	/*put the data that you want to transmit*/
	SPDR = data;
 872:	8f b9       	out	0x0f, r24	; 15
	/*polling while SPI flag goes UP*/
	while(Get_Bit(SPSR, 7) == 0);
 874:	77 9b       	sbis	0x0e, 7	; 14
 876:	fe cf       	rjmp	.-4      	; 0x874 <SPI_Transceiver+0x2>
	
	return SPDR;
 878:	8f b1       	in	r24, 0x0f	; 15
 87a:	08 95       	ret

0000087c <_exit>:
 87c:	f8 94       	cli

0000087e <__stop_program>:
 87e:	ff cf       	rjmp	.-2      	; 0x87e <__stop_program>
